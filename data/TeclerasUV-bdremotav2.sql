-- MySQL Script generated by MySQL Workbench
-- 11/16/15 21:35:15
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema sql396080
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema sql396080
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `sql396080` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `sql396080` ;

-- -----------------------------------------------------
-- Table `sql396080`.`TV_ASIGNATURA`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sql396080`.`TV_ASIGNATURA` ;

CREATE TABLE IF NOT EXISTS `sql396080`.`TV_ASIGNATURA` (
  `ASI_ID` INT NOT NULL AUTO_INCREMENT COMMENT 'ID correlativo automático\n',
  `ASI_CODIGO` VARCHAR(10) NOT NULL COMMENT 'Código de la asignatura (ej.: INC201)',
  `ASI_NOMBRE` VARCHAR(45) NOT NULL COMMENT 'Nombre de la asignatura',
  PRIMARY KEY (`ASI_ID`)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Tabla de asignaturas. Prefijo: ASI.';


-- -----------------------------------------------------
-- Table `sql396080`.`TV_DOCENTE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sql396080`.`TV_DOCENTE` ;

CREATE TABLE IF NOT EXISTS `sql396080`.`TV_DOCENTE` (
  `DOC_ID` INT NOT NULL AUTO_INCREMENT COMMENT 'ID correlativo automático\n',
  `DOC_CORREO` VARCHAR(100) NOT NULL COMMENT 'Correo electrónico. Uso como nombre de usuario',
  `DOC_NOMBRE` VARCHAR(45) NOT NULL COMMENT 'Nombre del docente',
  `DOC_PASSWORD` VARCHAR(45) NOT NULL COMMENT 'Contraseña para usuarios de tipo Docente.',
  PRIMARY KEY (`DOC_ID`)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Docentes. Sólo un docente es el encargado de hacer preguntas de su paralelo.\nPrefijo: DOC';


-- -----------------------------------------------------
-- Table `sql396080`.`TV_PARALELO`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sql396080`.`TV_PARALELO` ;

CREATE TABLE IF NOT EXISTS `sql396080`.`TV_PARALELO` (
  `PAR_ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Id. correlativo automático.',
  `PAR_NUMERO` INT NOT NULL COMMENT 'Número del paralelo\n',
  `ASI_ID` INT NOT NULL COMMENT 'ID de la asignatura',
  `TV_DOCENTE_DOC_ID` INT NOT NULL COMMENT '',
  PRIMARY KEY (`PAR_ID`, `ASI_ID`, `TV_DOCENTE_DOC_ID`)  COMMENT '',
  INDEX `fk_Paralelo_Asignatura1_idx` (`ASI_ID` ASC)  COMMENT '',
  INDEX `fk_TV_PARALELO_TV_DOCENTE1_idx` (`TV_DOCENTE_DOC_ID` ASC)  COMMENT '',
  CONSTRAINT `fk_Paralelo_Asignatura1`
    FOREIGN KEY (`ASI_ID`)
    REFERENCES `sql396080`.`TV_ASIGNATURA` (`ASI_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TV_PARALELO_TV_DOCENTE1`
    FOREIGN KEY (`TV_DOCENTE_DOC_ID`)
    REFERENCES `sql396080`.`TV_DOCENTE` (`DOC_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Paralelos de una asignatura. Prefijo: PAR';


-- -----------------------------------------------------
-- Table `sql396080`.`TV_PREGUNTA_MAESTRA`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sql396080`.`TV_PREGUNTA_MAESTRA` ;

CREATE TABLE IF NOT EXISTS `sql396080`.`TV_PREGUNTA_MAESTRA` (
  `PM_ID` INT NOT NULL AUTO_INCREMENT COMMENT 'ID correlativo automático\n',
  `PM_NOMBRE` VARCHAR(45) NOT NULL COMMENT 'Nombre corto de la pregunta',
  `PM_TEXTO` VARCHAR(2000) NOT NULL COMMENT 'Texto de la pregunta\n',
  `PM_TIPO` VARCHAR(1) NOT NULL COMMENT 'Tipo de la pregunta. Valores posibles: \n1: Alternativas\n2: Dicotómicas\n3: Likert\n',
  `PM_FECHA_CREACION` DATETIME NULL COMMENT 'Fecha y hora de creación de la pregunta',
  `PM_RUTA_IMAGEN` VARCHAR(45) NULL COMMENT 'Ruta física en disco de la imagen cargada.',
  `PM_RUTA_VIDEO` VARCHAR(45) NULL COMMENT 'Ruta física en disco de la imagen cargada.',
  `PM_EXPLICACION` VARCHAR(2000) NOT NULL COMMENT 'Explicación de respuesta correcta.',
  `PM_RUTA_IMAGEN_EXPLICACION` VARCHAR(45) NULL COMMENT 'Ruta del archivo de image cargado como explicacion',
  `TV_PARALELO_PAR_ID` INT NOT NULL COMMENT '',
  `TV_PARALELO_ASI_ID` INT NOT NULL COMMENT '',
  `TV_PARALELO_TV_DOCENTE_DOC_ID` INT NOT NULL COMMENT '',
  PRIMARY KEY (`PM_ID`)  COMMENT '',
  INDEX `fk_TV_PREGUNTA_MAESTRA_TV_PARALELO1_idx` (`TV_PARALELO_PAR_ID` ASC, `TV_PARALELO_ASI_ID` ASC, `TV_PARALELO_TV_DOCENTE_DOC_ID` ASC)  COMMENT '',
  CONSTRAINT `fk_TV_PREGUNTA_MAESTRA_TV_PARALELO1`
    FOREIGN KEY (`TV_PARALELO_PAR_ID` , `TV_PARALELO_ASI_ID` , `TV_PARALELO_TV_DOCENTE_DOC_ID`)
    REFERENCES `sql396080`.`TV_PARALELO` (`PAR_ID` , `ASI_ID` , `TV_DOCENTE_DOC_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Pregunta maestra (Creada en CU Gestionar Pregunta). Prefijo: PM';


-- -----------------------------------------------------
-- Table `sql396080`.`TV_RESPUESTAS`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sql396080`.`TV_RESPUESTAS` ;

CREATE TABLE IF NOT EXISTS `sql396080`.`TV_RESPUESTAS` (
  `RES_ID` INT NOT NULL AUTO_INCREMENT COMMENT '',
  `RES_TEXTO` VARCHAR(2000) NOT NULL COMMENT '',
  `PM_ID` INT NOT NULL COMMENT 'ID de la Pregunta Maestra\n',
  `PM_CORRECTA` VARCHAR(45) NOT NULL COMMENT 'Indica si la respuesta es correcta. Valores posibles:\n1: Correcta.\n0: Incorrecta.\n',
  PRIMARY KEY (`RES_ID`)  COMMENT '',
  INDEX `fk_Alternativa_PreguntaMaestra_idx` (`PM_ID` ASC)  COMMENT '',
  CONSTRAINT `fk_Alternativa_PreguntaMaestra`
    FOREIGN KEY (`PM_ID`)
    REFERENCES `sql396080`.`TV_PREGUNTA_MAESTRA` (`PM_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Respuestas posibles para una Pregunta Maestra. Prefijo: RES';


-- -----------------------------------------------------
-- Table `sql396080`.`TV_CLASE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sql396080`.`TV_CLASE` ;

CREATE TABLE IF NOT EXISTS `sql396080`.`TV_CLASE` (
  `CLA_ID` INT NOT NULL AUTO_INCREMENT COMMENT 'ID correlativo automático de Clase\n',
  `CLA_PASSWORD` VARCHAR(45) NOT NULL COMMENT 'Clave de conexión generada para que alumnos se agreguen a una clase',
  `CLA_FECHA_HORA_INICIO` DATETIME NOT NULL COMMENT 'Fecha y hora de inicio de la clase',
  `PAR_ID` INT NOT NULL COMMENT 'ID paralelo',
  `ASI_ID` INT NOT NULL COMMENT 'Id asignatra',
  `DOC_ID` INT NOT NULL COMMENT 'ID Docente',
  PRIMARY KEY (`CLA_ID`)  COMMENT '',
  INDEX `fk_TV_CLASE_TV_PARALELO1_idx` (`PAR_ID` ASC, `ASI_ID` ASC, `DOC_ID` ASC)  COMMENT '',
  CONSTRAINT `fk_TV_CLASE_TV_PARALELO1`
    FOREIGN KEY (`PAR_ID` , `ASI_ID` , `DOC_ID`)
    REFERENCES `sql396080`.`TV_PARALELO` (`PAR_ID` , `ASI_ID` , `TV_DOCENTE_DOC_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Clase realizada por el profesor usando el sistema. Creada en CU Realizar Pregunta.\nPrefijo_CLA.';


-- -----------------------------------------------------
-- Table `sql396080`.`TV_PREGUNTA_REALIZADA`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sql396080`.`TV_PREGUNTA_REALIZADA` ;

CREATE TABLE IF NOT EXISTS `sql396080`.`TV_PREGUNTA_REALIZADA` (
  `PR_ID` INT NOT NULL AUTO_INCREMENT COMMENT 'ID correlativo automático',
  `PR_HORA_INICIO` DATETIME NOT NULL COMMENT 'Fecha y hora de realización de a pregunta',
  `PR_HORA_FIN` DATETIME NULL COMMENT 'Fecha y hora de termino de la pregunta. Se llena cuando el docente da por terminada la pregunta, cuando se acaba el tiempo máximo de respuesta, o cuando todos los estudiates de la clase responden.',
  `PR_TIEMPO_MAX` INT NULL COMMENT 'Tiempo máximo de respuesta, en minutos',
  `PM_ID` INT NOT NULL COMMENT 'ID Pregunta maestra',
  `CLA_ID` INT NOT NULL COMMENT 'ID Clase',
  PRIMARY KEY (`PR_ID`)  COMMENT '',
  INDEX `fk_TV_PREGUNTA_REALIZADA_TV_PREGUNTA_MAESTRA1_idx` (`PM_ID` ASC)  COMMENT '',
  INDEX `fk_TV_PREGUNTA_REALIZADA_TV_CLASE1_idx` (`CLA_ID` ASC)  COMMENT '',
  CONSTRAINT `fk_TV_PREGUNTA_REALIZADA_TV_PREGUNTA_MAESTRA1`
    FOREIGN KEY (`PM_ID`)
    REFERENCES `sql396080`.`TV_PREGUNTA_MAESTRA` (`PM_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TV_PREGUNTA_REALIZADA_TV_CLASE1`
    FOREIGN KEY (`CLA_ID`)
    REFERENCES `sql396080`.`TV_CLASE` (`CLA_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Preguntas realizadas en una clase. Creadas en CU Realizar pregunta.\nPrefijo: PR';


-- -----------------------------------------------------
-- Table `sql396080`.`TV_ESTUDIANTE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sql396080`.`TV_ESTUDIANTE` ;

CREATE TABLE IF NOT EXISTS `sql396080`.`TV_ESTUDIANTE` (
  `EST_ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Id correlativo automático',
  `EST_CORREO` VARCHAR(100) NOT NULL COMMENT 'Correo Electrónico del Estudiante. Usado como nombre de usuario.',
  `EST_NOMBRE` VARCHAR(100) NOT NULL COMMENT 'Nombre completo del estudiante',
  `EST_PASSWORD` VARCHAR(45) NOT NULL COMMENT 'Contraseña para usuario de tipo estudiante.',
  PRIMARY KEY (`EST_ID`)  COMMENT '')
ENGINE = InnoDB
COMMENT = 'Estudiante.\nPrefijo: EST';


-- -----------------------------------------------------
-- Table `sql396080`.`TV_ASISTENCIA_CLASE`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sql396080`.`TV_ASISTENCIA_CLASE` ;

CREATE TABLE IF NOT EXISTS `sql396080`.`TV_ASISTENCIA_CLASE` (
  `AC_ID` INT NOT NULL AUTO_INCREMENT COMMENT 'Id correlativo automatico',
  `EST_ID` INT NOT NULL COMMENT 'Id estudiante',
  `CLA_ID` INT NOT NULL COMMENT 'ID clase',
  PRIMARY KEY (`AC_ID`)  COMMENT '',
  INDEX `fk_TV_ASISTENCIA_CLASE_TV_ESTUDIANTE1_idx` (`EST_ID` ASC)  COMMENT '',
  INDEX `fk_TV_ASISTENCIA_CLASE_TV_CLASE1_idx` (`CLA_ID` ASC)  COMMENT '',
  CONSTRAINT `fk_TV_ASISTENCIA_CLASE_TV_ESTUDIANTE1`
    FOREIGN KEY (`EST_ID`)
    REFERENCES `sql396080`.`TV_ESTUDIANTE` (`EST_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TV_ASISTENCIA_CLASE_TV_CLASE1`
    FOREIGN KEY (`CLA_ID`)
    REFERENCES `sql396080`.`TV_CLASE` (`CLA_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Estudiantes que asisten a una clase. Se crea un registro cuando el estudiante se agrega a una clase.\nPrefijo: AC';


-- -----------------------------------------------------
-- Table `sql396080`.`TV_PREGUNTA_RESPONDIDA`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `sql396080`.`TV_PREGUNTA_RESPONDIDA` ;

CREATE TABLE IF NOT EXISTS `sql396080`.`TV_PREGUNTA_RESPONDIDA` (
  `PRES_ID` INT NOT NULL AUTO_INCREMENT COMMENT 'ID Correlativo automático',
  `PR_ID` INT NOT NULL COMMENT 'ID de la pregunta realizada a la que se responde',
  `EST_ID` INT NOT NULL COMMENT 'Estudiante que responde',
  `RES_ID` INT NULL COMMENT 'Id de la respuesta seleccionada.\nPuede ser nulo para preguntas tipo Likert',
  `PRES_LIKERT` VARCHAR(1) NULL COMMENT 'Respuesta para una pregunta tipo Likert. Valores posibles:\n1: Muy en desacuerdo\n2: …',
  PRIMARY KEY (`PRES_ID`)  COMMENT '',
  INDEX `fk_TV_PREGUNTA_RESPONDIDA_TV_PREGUNTA_REALIZADA1_idx` (`PR_ID` ASC)  COMMENT '',
  INDEX `fk_TV_PREGUNTA_RESPONDIDA_TV_ESTUDIANTE1_idx` (`EST_ID` ASC)  COMMENT '',
  INDEX `fk_TV_PREGUNTA_RESPONDIDA_TV_RESPUESTAS1_idx` (`RES_ID` ASC)  COMMENT '',
  CONSTRAINT `fk_TV_PREGUNTA_RESPONDIDA_TV_PREGUNTA_REALIZADA1`
    FOREIGN KEY (`PR_ID`)
    REFERENCES `sql396080`.`TV_PREGUNTA_REALIZADA` (`PR_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TV_PREGUNTA_RESPONDIDA_TV_ESTUDIANTE1`
    FOREIGN KEY (`EST_ID`)
    REFERENCES `sql396080`.`TV_ESTUDIANTE` (`EST_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_TV_PREGUNTA_RESPONDIDA_TV_RESPUESTAS1`
    FOREIGN KEY (`RES_ID`)
    REFERENCES `sql396080`.`TV_RESPUESTAS` (`RES_ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB
COMMENT = 'Respuestas dadas por los estudiantes.\nPrefijo: PRES';


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
